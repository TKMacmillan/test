(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["ReactAriaMenuButton"] = factory(require("react"), require("react-dom"));
	else
		root["ReactAriaMenuButton"] = factory(root["React"], root["ReactDOM"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_4__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var externalStateControl = __webpack_require__(3);

	module.exports = {
	  Wrapper: __webpack_require__(8),
	  Button: __webpack_require__(5),
	  Menu: __webpack_require__(6),
	  MenuItem: __webpack_require__(7),
	  openMenu: externalStateControl.openMenu,
	  closeMenu: externalStateControl.closeMenu,
	};


/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = function(a, b, reserved) {
	  // This will get id, className, style, etc.
	  for (var x in b) {
	    if (!b.hasOwnProperty(x)) continue;
	    if (reserved[x]) continue;
	    a[x] = b[x];
	  }
	}


/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports) {

	var registeredManagers = {};

	var errorCommon = 'a menu outside a mounted Wrapper with an id, or a menu that does not exist';

	function registerManager(menuId, manager) {
	  registeredManagers[menuId] = manager;
	}

	function unregisterManager(menuId) {
	  delete registeredManagers[menuId];
	}

	function openMenu(menuId, openOptions) {
	  var manager = registeredManagers[menuId];
	  if (!manager) throw new Error('Cannot open ' + errorCommon);
	  manager.openMenu(openOptions);
	}

	function closeMenu(menuId, closeOptions) {
	  var manager = registeredManagers[menuId];
	  if (!manager) throw new Error('Cannot close ' + errorCommon);
	  manager.closeMenu(closeOptions);
	}

	module.exports = {
	  registerManager: registerManager,
	  unregisterManager: unregisterManager,
	  openMenu: openMenu,
	  closeMenu: closeMenu,
	}


/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(2);
	var specialAssign = __webpack_require__(1);

	var checkedProps = {
	  children: React.PropTypes.node.isRequired,
	  disabled: React.PropTypes.bool,
	  tag: React.PropTypes.string,
	};

	module.exports = React.createClass({
	  displayName: 'AriaMenuButton-Button',

	  propTypes: checkedProps,

	  contextTypes: {
	    ambManager: React.PropTypes.object.isRequired,
	  },

	  getDefaultProps: function() {
	    return { tag: 'span' };
	  },

	  componentWillMount: function() {
	    this.context.ambManager.button = this;
	  },

	  componentWillUnmount: function() {
	    this.context.ambManager.destroy();
	  },

	  handleKeyDown: function(event) {
	    if (this.props.disabled) return;

	    var ambManager = this.context.ambManager;

	    switch (event.key) {
	      case 'ArrowDown':
	        event.preventDefault();
	        if (!ambManager.isOpen) {
	          ambManager.openMenu({ focusMenu: true });
	        } else {
	          ambManager.focusItem(0);
	        }
	        break;
	      case 'Enter':
	      case ' ':
	        event.preventDefault();
	        ambManager.toggleMenu();
	        break;
	      case 'Escape':
	        ambManager.handleMenuKey(event);
	        break;
	      default:
	        // (Potential) letter keys
	        ambManager.handleButtonNonArrowKey(event);
	    }
	  },

	  handleClick: function() {
	    if (this.props.disabled) return;
	    this.context.ambManager.toggleMenu();
	  },

	  render: function() {
	    var props = this.props;

	    var buttonProps = {
	      // "The menu button itself has a role of button."
	      role: 'button',
	      tabIndex: (props.disabled) ? '' : '0',
	      // "The menu button has an aria-haspopup property, set to true."
	      'aria-haspopup': true,
	      'aria-expanded': this.context.ambManager.isOpen,
	      'aria-disabled': props.disabled,
	      onKeyDown: this.handleKeyDown,
	      onClick: this.handleClick,
	      onBlur: this.context.ambManager.handleBlur,
	    };

	    specialAssign(buttonProps, props, checkedProps);

	    return React.createElement(props.tag, buttonProps, props.children);
	  },
	});


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(2);
	var ReactDOM = __webpack_require__(4);
	var createTapListener = __webpack_require__(11);
	var specialAssign = __webpack_require__(1);

	var checkedProps = {
	  children: React.PropTypes.oneOfType([
	    React.PropTypes.func,
	    React.PropTypes.node,
	  ]).isRequired,
	  tag: React.PropTypes.string,
	};

	module.exports = React.createClass({
	  displayName: 'AriaMenuButton-Menu',

	  propTypes: checkedProps,

	  getDefaultProps: function() {
	    return { tag: 'div' };
	  },

	  contextTypes: {
	    ambManager: React.PropTypes.object.isRequired,
	  },

	  componentWillMount: function() {
	    this.context.ambManager.menu = this;
	  },

	  componentWillUpdate: function() {
	    var ambManager = this.context.ambManager;
	    if (ambManager.isOpen && !this.tapListener) {
	      this.addTapListener();
	    } else if (!ambManager.isOpen && this.tapListener) {
	      this.tapListener.remove()
	      delete this.tapListener;
	    }

	    if (!ambManager.isOpen) {
	      // Clear the ambManager's items, so they
	      // can be reloaded next time this menu opens
	      ambManager.clearItems();
	    }
	  },

	  componentWillUnmount: function() {
	    if (this.tapListener) this.tapListener.remove();
	    this.context.ambManager.destroy();
	  },

	  addTapListener: function() {
	    if (!window || !window.document) return;
	    this.tapListener = createTapListener(document.documentElement, this.handleTap);
	  },

	  handleTap: function(event) {
	    if (ReactDOM.findDOMNode(this).contains(event.target)) return;
	    if (ReactDOM.findDOMNode(this.context.ambManager.button).contains(event.target)) return;
	    this.context.ambManager.closeMenu();
	  },

	  render: function() {
	    var props = this.props;
	    var ambManager = this.context.ambManager;

	    var childrenToRender = (function() {
	      if (typeof props.children === 'function') {
	        return props.children({ isOpen: ambManager.isOpen });
	      }
	      if (ambManager.isOpen) return props.children;
	      return false;
	    }());

	    if (!childrenToRender) return false;

	    var menuProps = {
	      onKeyDown: ambManager.handleMenuKey,
	      role: 'menu',
	      onBlur: ambManager.handleBlur,
	    };

	    specialAssign(menuProps, props, checkedProps);

	    return React.createElement(props.tag, menuProps, childrenToRender);
	  },
	});


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(2);
	var specialAssign = __webpack_require__(1);

	var checkedProps = {
	  children: React.PropTypes.node.isRequired,
	  tag: React.PropTypes.string,
	  text: React.PropTypes.string,
	  value: React.PropTypes.any,
	};

	module.exports = React.createClass({
	  displayName: 'AriaMenuButton-MenuItem',

	  propTypes: checkedProps,

	  getDefaultProps: function() {
	    return { tag: 'div' };
	  },

	  contextTypes: {
	    ambManager: React.PropTypes.object.isRequired,
	  },

	  componentDidMount: function() {
	    this.context.ambManager.addItem({
	      node: this.node,
	      text: this.props.text,
	    });
	  },

	  handleKeyDown: function(event) {
	    if (event.key !== 'Enter' && event.key !== ' ') return;
	    event.preventDefault();
	    this.selectItem(event);
	  },

	  selectItem: function(event) {
	    // If there's no value, we'll send the child
	    var value = (typeof this.props.value !== 'undefined')
	      ? this.props.value
	      : this.props.children;
	    this.context.ambManager.handleSelection(value, event);
	  },

	  registerNode: function(node) {
	    this.node = node;
	  },

	  render: function() {
	    var props = this.props;

	    var menuItemProps = {
	      onClick: this.selectItem,
	      onKeyDown: this.handleKeyDown,
	      role: 'menuitem',
	      tabIndex: '-1',
	      ref: this.registerNode,
	    };

	    specialAssign(menuItemProps, props, checkedProps);

	    return React.createElement(props.tag, menuItemProps, props.children);
	  },
	});


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(2);
	var createManager = __webpack_require__(9);
	var specialAssign = __webpack_require__(1);

	var checkedProps = {
	  children: React.PropTypes.node.isRequired,
	  onSelection: React.PropTypes.func.isRequired,
	  closeOnSelection: React.PropTypes.bool,
	  tag: React.PropTypes.string,
	};

	module.exports = React.createClass({
	  displayName: 'AriaMenuButton-Wrapper',

	  propTypes: checkedProps,

	  getDefaultProps: function() {
	    return { tag: 'div' };
	  },

	  childContextTypes: {
	    ambManager: React.PropTypes.object,
	  },

	  getChildContext: function() {
	    return {
	      ambManager: this.manager,
	    };
	  },

	  componentWillMount: function() {
	    this.manager = createManager({
	      onSelection: this.props.onSelection,
	      closeOnSelection: this.props.closeOnSelection,
	      id: this.props.id,
	    });
	  },

	  render: function() {
	    var props = this.props;
	    var wrapperProps = {};
	    specialAssign(wrapperProps, props, checkedProps);
	    return React.createElement(props.tag, wrapperProps, props.children);
	  },
	});


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var ReactDOM = __webpack_require__(4);
	var createFocusGroup = __webpack_require__(10);
	var externalStateControl = __webpack_require__(3);

	var focusGroupOptions = {
	  wrap: true,
	  stringSearch: true,
	};

	var protoManager = {

	  init: function(options) {
	    this.options = options || {};

	    if (typeof this.options.closeOnSelection === 'undefined') {
	      this.options.closeOnSelection = true;
	    }

	    if (this.options.id) {
	      externalStateControl.registerManager(this.options.id, this);
	    }

	    this.handleBlur = handleBlur.bind(this);
	    this.handleSelection = handleSelection.bind(this);
	    this.handleMenuKey = handleMenuKey.bind(this);

	    // "With focus on the drop-down menu, the Up and Down Arrow
	    // keys move focus within the menu items, "wrapping" at the top and bottom."
	    // "Typing a letter (printable character) key moves focus to the next
	    // instance of a visible node whose title begins with that printable letter."
	    //
	    // All of the above is handled by focus-group.
	    this.focusGroup = createFocusGroup(focusGroupOptions);

	    // These component references are added when the relevant components mount
	    this.button = null;
	    this.menu = null;

	    // State trackers
	    this.isOpen = false;
	  },

	  focusItem: function(index) {
	    this.focusGroup.focusNodeAtIndex(index);
	  },

	  addItem: function(item) {
	    this.focusGroup.addMember(item);
	  },

	  clearItems: function() {
	    this.focusGroup.clearMembers()
	  },

	  handleButtonNonArrowKey: function(event) {
	    this.focusGroup._handleNonArrowKey(event);
	  },

	  destroy: function() {
	    this.button = null;
	    this.menu = null;
	    this.focusGroup.deactivate();
	    clearTimeout(this.blurTimer)
	    clearTimeout(this.moveFocusTimer)
	  },

	  update: function() {
	    this.menu.setState({ isOpen: this.isOpen });
	    this.button.setState({ menuOpen: this.isOpen });
	  },

	  openMenu: function(openOptions) {
	    if (this.isOpen) return;
	    openOptions = openOptions || {};
	    this.isOpen = true;
	    this.update();
	    this.focusGroup.activate();
	    if (openOptions.focusMenu) {
	      var self = this;
	      this.moveFocusTimer = setTimeout(function() {
	        self.focusItem(0)
	      }, 0);
	    }
	  },

	  closeMenu: function(closeOptions) {
	    if (!this.isOpen) return;
	    closeOptions = closeOptions || {};
	    this.isOpen = false;
	    this.update();
	    if (closeOptions.focusButton) {
	      ReactDOM.findDOMNode(this.button).focus();
	    }
	  },

	  toggleMenu: function() {
	    if (this.isOpen) {
	      this.closeMenu();
	    } else {
	      this.openMenu();
	    }
	  },
	}

	function handleBlur() {
	  var self = this;
	  self.blurTimer = setTimeout(function() {
	    var activeEl = document.activeElement;
	    var buttonNode = ReactDOM.findDOMNode(self.button);
	    var menuNode = ReactDOM.findDOMNode(self.menu);
	    if (buttonNode && activeEl === buttonNode) return;
	    if (menuNode && menuNode.contains(activeEl)) return;
	    if (self.isOpen) self.closeMenu({ focusButton: false });
	  }, 0);
	}

	function handleSelection(value, event) {
	  if (this.options.closeOnSelection) this.closeMenu({ focusButton: true });
	  this.options.onSelection(value, event);
	}

	function handleMenuKey(event) {
	  // "With focus on the drop-down menu, pressing Escape closes
	  // the menu and returns focus to the button.
	  if (this.isOpen && event.key === 'Escape') {
	    event.preventDefault();
	    this.closeMenu({ focusButton: true });
	  }
	}

	module.exports = function(options) {
	  var newManager = Object.create(protoManager);
	  newManager.init(options);
	  return newManager;
	};


/***/ },
/* 10 */
/***/ function(module, exports) {

	function FocusGroup(options) {
	  options = options || {};
	  this._settings = {
	    forwardArrows: options.forwardArrows || ['down'],
	    backArrows: options.backArrows || ['up'],
	    wrap: options.wrap,
	    stringSearch: options.stringSearch,
	    stringSearchDelay: 800,
	  };
	  this._searchString = '';
	  this._members = [];
	  if (options.members) this.setMembers(options.members);
	  this._boundHandleKeydownEvent = this._handleKeydownEvent.bind(this);
	}

	FocusGroup.prototype.activate = function() {
	  // Use capture in case other libraries might grab it first -- i.e. React
	  document.addEventListener('keydown', this._boundHandleKeydownEvent, true);
	  return this;
	};

	FocusGroup.prototype.deactivate = function() {
	  document.removeEventListener('keydown', this._boundHandleKeydownEvent, true);
	  this._clearSearchStringRefreshTimer();
	  return this;
	};

	FocusGroup.prototype._handleKeydownEvent = function(event) {
	  // Only respond to keyboard events when
	  // focus is already within the focus-group
	  var activeElementIndex = this._getActiveElementIndex();
	  if (activeElementIndex === -1) return;

	  var arrow = getEventArrowKey(event);

	  if (!arrow) {
	    this._handleNonArrowKey(event);
	    return;
	  }

	  if (this._settings.forwardArrows.indexOf(arrow) !== -1) {
	    event.preventDefault();
	    this.moveFocusForward();
	    return;
	  }

	  if (this._settings.backArrows.indexOf(arrow) !== -1) {
	    event.preventDefault();
	    this.moveFocusBack();
	    return;
	  }
	};

	FocusGroup.prototype.moveFocusForward = function() {
	  var activeElementIndex = this._getActiveElementIndex();
	  var targetIndex;
	  if (activeElementIndex < this._members.length - 1) {
	    targetIndex = activeElementIndex + 1;
	  } else if (this._settings.wrap) {
	    targetIndex = 0;
	  } else {
	    targetIndex = activeElementIndex;
	  }
	  this.focusNodeAtIndex(targetIndex);
	  return targetIndex;
	};

	FocusGroup.prototype.moveFocusBack = function() {
	  var activeElementIndex = this._getActiveElementIndex();
	  var targetIndex;
	  if (activeElementIndex > 0) {
	    targetIndex = activeElementIndex - 1;
	  } else if (this._settings.wrap) {
	    targetIndex = this._members.length - 1;
	  } else {
	    targetIndex = activeElementIndex;
	  }
	  this.focusNodeAtIndex(targetIndex);
	  return targetIndex;
	};

	FocusGroup.prototype._handleNonArrowKey = function(event) {
	  if (!this._settings.stringSearch) return;

	  // While a string search is underway, ignore spaces
	  // and prevent the default space-key behavior
	  if (this._searchString !== '' && (event.key === ' ' || event.keyCode === 32)) {
	    event.preventDefault();
	    return -1;
	  }

	  // Only respond to letter keys
	  if (!isLetterKeyCode(event.keyCode)) return -1;

	  // If the letter key is part of a key combo,
	  // let it do whatever it was going to do
	  if (event.ctrlKey || event.metaKey || event.altKey) return -1;

	  event.preventDefault();

	  this._addToSearchString(String.fromCharCode(event.keyCode));
	  this._runStringSearch();
	};

	FocusGroup.prototype._clearSearchString = function() {
	  this._searchString = '';
	};

	FocusGroup.prototype._addToSearchString = function(letter) {
	  // Always store the lowercase version of the letter
	  this._searchString += letter.toLowerCase();
	};

	FocusGroup.prototype._startSearchStringRefreshTimer = function() {
	  var self = this;
	  this._clearSearchStringRefreshTimer();
	  this._stringSearchTimer = setTimeout(function() {
	    self._clearSearchString();
	  }, this._settings.stringSearchDelay);
	};

	FocusGroup.prototype._clearSearchStringRefreshTimer = function() {
	  clearTimeout(this._stringSearchTimer);
	}

	FocusGroup.prototype._runStringSearch = function() {
	  this._startSearchStringRefreshTimer();
	  this.moveFocusByString(this._searchString);
	}

	FocusGroup.prototype.moveFocusByString = function(str) {
	  var member;
	  for (var i = 0, l = this._members.length; i < l; i++) {
	    member = this._members[i];
	    if (!member.text) continue;

	    if (member.text.indexOf(str) === 0) {
	      return focusNode(member.node);
	    }
	  }
	}

	FocusGroup.prototype._findIndexOfNode = function(searchNode) {
	  for (var i = 0, l = this._members.length; i < l; i++) {
	    if (this._members[i].node === searchNode) {
	      return i;
	    }
	  }
	  return -1;
	}

	FocusGroup.prototype._getActiveElementIndex = function() {
	  return this._findIndexOfNode(document.activeElement);
	};

	FocusGroup.prototype.focusNodeAtIndex = function(index) {
	  var member = this._members[index];
	  if (member) focusNode(member.node);
	  return this;
	};

	FocusGroup.prototype.addMember = function(member, index) {
	  var node = member.node || member;
	  var nodeText = member.text || node.getAttribute('data-focus-group-text') || node.textContent || '';

	  this._checkNode(node);

	  var cleanedNodeText = nodeText.replace(/[\W_]/g, '').toLowerCase();
	  var member = {
	    node: node,
	    text: cleanedNodeText,
	  };

	  if (index !== null && index !== undefined) {
	    this._members.splice(index, 0, member);
	  } else {
	    this._members.push(member);
	  }
	  return this;
	};

	FocusGroup.prototype.removeMember = function(member) {
	  var removalIndex = (typeof member === 'number')
	    ? member
	    : this._findIndexOfNode(member);
	  if (removalIndex === -1) return;
	  this._members.splice(removalIndex, 1);
	  return this;
	};

	FocusGroup.prototype.clearMembers = function() {
	  this._members = [];
	  return this;
	};

	FocusGroup.prototype.setMembers = function(nextMembers) {
	  this.clearMembers();
	  for (var i = 0, l = nextMembers.length; i < l; i++) {
	    this.addMember(nextMembers[i]);
	  }
	  return this;
	};

	FocusGroup.prototype.getMembers = function() {
	  return this._members;
	};

	FocusGroup.prototype._checkNode = function(node) {
	  if (!node.nodeType || node.nodeType !== window.Node.ELEMENT_NODE) {
	    throw new Error('focus-group: only DOM nodes allowed');
	  }
	  return node;
	};

	function getEventArrowKey(event) {
	  if (event.key === 'ArrowUp' || event.keyCode === 38) return 'up';
	  if (event.key === 'ArrowDown' || event.keyCode === 40) return 'down';
	  if (event.key === 'ArrowLeft' || event.keyCode === 37) return 'left';
	  if (event.key === 'ArrowRight' || event.keyCode === 39) return 'right';
	  return null;
	}

	function isLetterKeyCode(keyCode) {
	  return keyCode >= 65 && keyCode <= 90;
	}

	function focusNode(node) {
	  if (!node || !node.focus) return;
	  node.focus();
	  if (node.tagName.toLowerCase() === 'input') node.select();
	}

	module.exports = function createFocusGroup(options) {
	  return new FocusGroup(options);
	};


/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = function createTapListener(el, callback, useCapture) {
	  var startX = 0;
	  var startY = 0;
	  var touchStarted = false;
	  var touchMoved = false;
	  // Assume that if a touchstart event initiates, the user is
	  // using touch and click events should be ignored.
	  // If this isn't done, touch-clicks will fire the callback
	  // twice: once on touchend, once on the subsequent "click".
	  var usingTouch = false;

	  el.addEventListener('click', handleClick, useCapture);
	  el.addEventListener('touchstart', handleTouchstart, useCapture);

	  function handleClick(e) {
	    if (usingTouch) return;
	    callback(e);
	  }

	  function handleTouchstart(e) {
	    usingTouch = true;

	    if (touchStarted) return;
	    touchStarted = true;

	    el.addEventListener('touchmove', handleTouchmove, useCapture);
	    el.addEventListener('touchend', handleTouchend, useCapture);
	    el.addEventListener('touchcancel', handleTouchcancel, useCapture);

	    touchMoved = false;
	    startX = e.touches[0].clientX;
	    startY = e.touches[0].clientY;
	  }

	  function handleTouchmove(e) {
	    if (touchMoved) return;

	    if (
	      Math.abs(e.touches[0].clientX - startX) <= 10
	      && Math.abs(e.touches[0].clientY - startY) <= 10
	    ) return;

	    touchMoved = true;
	  }

	  function handleTouchend(e) {
	    touchStarted = false;
	    removeSecondaryTouchListeners();
	    if (!touchMoved) {
	      callback(e);
	    }
	  }

	  function handleTouchcancel() {
	    touchStarted = false;
	    touchMoved = false;
	    startX = 0;
	    startY = 0;
	  }

	  function removeSecondaryTouchListeners() {
	    el.removeEventListener('touchmove', handleTouchmove, useCapture);
	    el.removeEventListener('touchend', handleTouchend, useCapture);
	    el.removeEventListener('touchcancel', handleTouchcancel, useCapture);
	  }

	  function removeTapListener() {
	    el.removeEventListener('click', handleClick, useCapture);
	    el.removeEventListener('touchstart', handleTouchstart, useCapture);
	    removeSecondaryTouchListeners();
	  }

	  return {
	    remove: removeTapListener,
	  };
	};


/***/ }
/******/ ])
});
;